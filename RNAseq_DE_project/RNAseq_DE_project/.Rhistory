# Carica pacchetti necessari
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("GEOquery", quietly = TRUE))
BiocManager::install("GEOquery")
list.files("data/GSE152641/", recursive = TRUE)
setwd("/Users/chiara/ChiaraTarenghi/RNAseq_DE_project")
dir.create("data", showWarnings = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(GEOquery)
# Scarica i file supplementari
getGEOSuppFiles("GSE152641", baseDir = "data")
list.files("data/GSE152641/", recursive = TRUE)
scripts/02_prepare_data.R
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/scripts:02_prepare_data.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/scripts:02_prepare_data.R")
install.packages("tidyverse")
library(DESeq2)
library(tidyverse)
sessionInfo()  # mostra le versioni dei pacchetti attivi
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/scripts:02_prepare_data.R")
library(GEOquery)
# Carica i metadati della serie
gse <- getGEO("GSE152641", GSEMatrix = FALSE)
gsm <- GSMList(gse)
# Estrai le caratteristiche e i titoli dei primi 5 campioni
sample_info <- sapply(gsm[1:5], function(x) Meta(x)[c("characteristics_ch1", "title")])
sample_info
# Estrai le caratteristiche per tutti i campioni
characteristics <- sapply(gsm, function(x) Meta(x)$characteristics_ch1)
# Crea un data frame con le informazioni
metadata <- data.frame(
sample = names(gsm),
condition = sapply(characteristics, function(x) ifelse(grepl("Healthy control", x), "Control", "COVID"))
)
rownames(metadata) <- metadata$sample
head(metadata)
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/scripts:02_prepare_data.R")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/02_prepare_data.R")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/04_QC_PCA.R")
install.packages("pheatmap")
library(pheatmap)
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/04_QC_PCA.R")
list.files("results/")
dir.create("results", showWarnings = FALSE)
source("scripts/03_prepare_DESeq2.R")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/04_QC_PCA.R")
list.files("results/")
dir.create("results", showWarnings = FALSE)
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
results/dds_ready.rds
list.files("results/")
# Dovresti vedere: "dds_ready.rds"
list.files("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/")
dir.create("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/results", showWarnings = FALSE)
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
results/dds_ready.rds
list.files("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/results/")
# Dovresti vedere: "dds_ready.rds"
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
dir.create("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/results", showWarnings = FALSE)
if (!requireNamespace("DESeq2", quietly = TRUE)) BiocManager::install("DESeq2")
if (!requireNamespace("GEOquery", quietly = TRUE)) BiocManager::install("GEOquery")
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
# Questo comando deve creare dds_ready.rds
source("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/scripts/03_prepare_DESeq2.R")
list.files("~/ChiaraTarenghi/RNAseq_DE_project/RNAseq_DE_project/results/")
# Dovresti vedere: "dds_ready.rds"
any(duplicated(names(gsm)))
# TRUE se ci sono duplicati
length(unique(colnames(counts)))  # deve essere uguale a ncol(counts)
ncol(counts)
nrow(metadata)
all(colnames(counts) %in% rownames(metadata))
# Prendiamo solo i campioni presenti nella count matrix
samples_counts <- colnames(counts)
# Estrai le caratteristiche per questi campioni
metadata <- data.frame(
sample = samples_counts,
condition = sapply(samples_counts, function(x) {
meta_x <- Meta(GSMList(getGEO("GSE152641", GSEMatrix = FALSE))[[x]])$characteristics_ch1
if (grepl("Healthy control", meta_x)) "Control" else "COVID"
})
)
library(GEOquery)
gse <- getGEO("GSE152641", GSEMatrix = FALSE)
gsm_list <- GSMList(gse)
samples_counts <- colnames(counts)
# Crea metadata vuoto
metadata <- data.frame(
sample = samples_counts,
condition = NA
)
# Assegna la condizione ai campioni basandosi sui titoli nella lista GSM
for (i in seq_along(samples_counts)) {
gsm_name <- samples_counts[i]         # nome del campione dalla count matrix
gsm_obj <- gsm_list[[gsm_name]]       # prendi l'oggetto GSM corrispondente
char <- Meta(gsm_obj)$characteristics_ch1
if (grepl("Healthy control", char)) {
metadata$condition[i] <- "Control"
} else {
metadata$condition[i] <- "COVID"
}
}
library(GEOquery)
# Carica la serie GEO
gse <- getGEO("GSE152641", GSEMatrix = FALSE)
gsm_list <- GSMList(gse)
# Prendi le caratteristiche di tutti i GSM in ordine
conditions <- sapply(gsm_list, function(x) {
char <- Meta(x)$characteristics_ch1
if (grepl("Healthy control", char)) "Control" else "COVID"
})
library(GEOquery)
# Carica la serie GEO
gse <- getGEO("GSE152641", GSEMatrix = FALSE)
gsm_list <- GSMList(gse)
# Prendi le condizioni dei campioni
conditions <- sapply(gsm_list, function(x) {
char <- Meta(x)$characteristics_ch1
if (any(grepl("Healthy control", char))) {
"Control"
} else {
"COVID"
}
})
# Limita alle colonne presenti nella count matrix (86 campioni)
metadata <- data.frame(
sample = colnames(counts),
condition = conditions[1:ncol(counts)]
)
rownames(metadata) <- metadata$sample
# Controllo
nrow(metadata)               # 86
all(colnames(counts) == rownames(metadata))  # TRUE
table(metadata$condition)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = metadata,
design = ~ condition
)
# Salva l’oggetto per analisi future
dir.create("results", showWarnings = FALSE)  # se non esiste
saveRDS(dds, file = "results/dds_ready.rds")
dds  # controlla l’oggetto
source("scripts/04_QC_PCA.R")
list.files("scripts/")
# ===========================================
# RNA-seq Analysis: DESeq2 + PCA + Heatmap
# ===========================================
# 1. Installazione pacchetti necessari
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
packages_bioc <- c("DESeq2", "GEOquery")
packages_cran <- c("ggplot2", "pheatmap", "RColorBrewer", "matrixStats")
for (pkg in packages_bioc) {
if (!requireNamespace(pkg, quietly = TRUE)) BiocManager::install(pkg)
}
for (pkg in packages_cran) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
}
library(GEOquery)
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(matrixStats)
# 2. Creazione cartelle results e figures
dir.create("results", showWarnings = FALSE)
dir.create("figures", showWarnings = FALSE)
# 3. Scarica dataset da GEO
gse <- getGEO("GSE152641", GSEMatrix = FALSE)
gsm_list <- GSMList(gse)
# 4. Scarica file supplementari (count matrix)
getGEOSuppFiles("GSE152641", baseDir = "data")
# Il file CSV dei counts
count_file <- "data/GSE152641/GSE152641_Inflammatix_COVID19_counts_entrez.csv.gz"
counts <- read.csv(count_file, row.names = 1)
counts <- as.matrix(counts)
# 5. Prepara il metadata
samples_counts <- colnames(counts)
conditions <- sapply(gsm_list, function(x) {
char <- Meta(x)$characteristics_ch1
if (any(grepl("Healthy control", char))) "Control" else "COVID"
})
metadata <- data.frame(
sample = samples_counts,
condition = conditions[1:ncol(counts)]
)
rownames(metadata) <- metadata$sample
# Controllo
stopifnot(all(colnames(counts) == rownames(metadata)))
# 6. Crea oggetto DESeq2
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = metadata,
design = ~ condition
)
saveRDS(dds, file = "results/dds_ready.rds")
# 7. Trasformazione VST
vsd <- vst(dds, blind = FALSE)
# 8. PCA dei campioni
pca_data <- plotPCA(vsd, intgroup = "condition", returnData = TRUE)
percentVar <- round(100 * attr(pca_data, "percentVar"))
p <- ggplot(pca_data, aes(x = PC1, y = PC2, color = condition)) +
geom_point(size = 4) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
theme_minimal() +
scale_color_brewer(palette = "Set1")
ggsave("figures/PCA_plot.png", plot = p, width = 6, height = 5)
print(p)
# 9. Heatmap dei top 20 geni più variabili
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat <- assay(vsd)[topVarGenes, ]
mat <- mat - rowMeans(mat)
pheatmap(mat,
annotation_col = as.data.frame(colData(vsd)[, "condition", drop = FALSE]),
color = colorRampPalette(rev(brewer.pal(9, "RdBu")))(255),
main = "Top 20 most variable genes",
filename = "figures/heatmap_top20.png",
width = 6, height = 5)
message("Analisi completata! PCA e heatmap salvate in 'figures/' e oggetto DESeq2 in 'results/dds_ready.rds'.")
# ===========================================
# Analisi differenziale DESeq2 + Volcano Plot
# ===========================================
library(DESeq2)
library(ggplot2)
library(RColorBrewer)
# 1. Carica l'oggetto DESeq2 preparato
dds <- readRDS("results/dds_ready.rds")
# 2. Esegui DESeq2
dds <- DESeq(dds)
# 3. Estrai risultati COVID vs Control
res <- results(dds, contrast = c("condition", "COVID", "Control"))
res <- lfcShrink(dds, coef="condition_COVID_vs_Control", type="apeglm")  # più stabile per log2FoldChange
